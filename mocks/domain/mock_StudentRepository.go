// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vipul-08/student-api/domain (interfaces: StudentRepository)

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/vipul-08/student-api/domain"
	exceptions "github.com/vipul-08/student-api/exceptions"
)

// MockStudentRepository is a mock of StudentRepository interface.
type MockStudentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStudentRepositoryMockRecorder
}

// MockStudentRepositoryMockRecorder is the mock recorder for MockStudentRepository.
type MockStudentRepositoryMockRecorder struct {
	mock *MockStudentRepository
}

// NewMockStudentRepository creates a new mock instance.
func NewMockStudentRepository(ctrl *gomock.Controller) *MockStudentRepository {
	mock := &MockStudentRepository{ctrl: ctrl}
	mock.recorder = &MockStudentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentRepository) EXPECT() *MockStudentRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStudentRepository) Delete(arg0 int) (int64, *exceptions.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.AppError)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStudentRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStudentRepository)(nil).Delete), arg0)
}

// FindAll mocks base method.
func (m *MockStudentRepository) FindAll() ([]domain.Student, *exceptions.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]domain.Student)
	ret1, _ := ret[1].(*exceptions.AppError)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockStudentRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockStudentRepository)(nil).FindAll))
}

// FindById mocks base method.
func (m *MockStudentRepository) FindById(arg0 int) (*domain.Student, *exceptions.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(*domain.Student)
	ret1, _ := ret[1].(*exceptions.AppError)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockStudentRepositoryMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockStudentRepository)(nil).FindById), arg0)
}

// Insert mocks base method.
func (m *MockStudentRepository) Insert(arg0 *domain.Student) (*domain.Student, *exceptions.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(*domain.Student)
	ret1, _ := ret[1].(*exceptions.AppError)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockStudentRepositoryMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockStudentRepository)(nil).Insert), arg0)
}

// Update mocks base method.
func (m *MockStudentRepository) Update(arg0 *domain.Student) (*domain.Student, *exceptions.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*domain.Student)
	ret1, _ := ret[1].(*exceptions.AppError)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStudentRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStudentRepository)(nil).Update), arg0)
}
